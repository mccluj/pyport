import multiprocessing
import psutil
import time
import pickle

class BackgroundTaskRunner:
    def __init__(self, priority='low'):
        self.manager = multiprocessing.Manager()
        self.task_results = self.manager.dict()
        self.tasks = []
        self.priority = priority

    def set_process_priority(self, pid, low=True):
        try:
            p = psutil.Process(pid)
            if low:
                p.nice(psutil.IDLE_PRIORITY_CLASS)
            else:
                p.nice(psutil.NORMAL_PRIORITY_CLASS)
        except Exception as e:
            print(f"Error setting process priority: {e}")

    def add_task(self, func, args=(), kwargs={}, task_id=None):
        """Add a task to the runner with unique task_id."""
        if task_id is None:
            task_id = len(self.tasks)
        task = multiprocessing.Process(target=self.task_wrapper, args=(func, task_id) + args, kwargs=kwargs)
        self.tasks.append((task_id, task))

    def task_wrapper(self, func, task_id, *args, **kwargs):
        """Wrap the task function to adjust priority and capture return values."""
        if self.priority == 'low':
            self.set_process_priority(multiprocessing.current_process().pid, low=True)
        else:
            self.set_process_priority(multiprocessing.current_process().pid, low=False)
        result = func(*args, **kwargs)
        self.task_results[task_id] = result

    def run_all(self):
        """Start all tasks and wait for them to complete."""
        for task_id, task in self.tasks:
            task.start()
        for task_id, task in self.tasks:
            task.join()

    def save_results(self, filename):
        """Save the task results to a pickle file."""
        with open(filename, 'wb') as f:
            pickle.dump(dict(self.task_results), f)

# Example usage
def example_task(duration, message):
    time.sleep(duration)
    return f"Completed: {message}"

if __name__ == "__main__":
    runner = BackgroundTaskRunner(priority='low')
    runner.add_task(example_task, args=(1, "Task 1"), task_id="t1")
    runner.add_task(example_task, args=(2, "Task 2"), task_id="t2")
    print("Starting background tasks...")
    runner.run_all()
    print("All tasks completed. Saving results...")
    runner.save_results("task_results.pkl")
    
    # Example for loading the results
    with open("task_results.pkl", "rb") as f:
        loaded_results = pickle.load(f)
    print("Loaded results:", loaded_results)
