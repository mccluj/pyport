import yaml
import pandas as pd
from datetime import datetime, timedelta

def load_config(file_path):
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)

def check_triggers(portfolio, config, current_date):
    triggers_to_activate = []
    for trigger in config['rebalance_triggers']['portfolio']:
        if trigger['type'] == 'periodic' and current_date.day == 1:
            triggers_to_activate.append(trigger['name'])
        elif trigger['type'] == 'threshold':
            for asset, weight in portfolio['weights'].items():
                target = config['rebalance_actions'][1]['actions'][0]['method']['targets'][asset]
                if abs(weight - target) > trigger['threshold']:
                    triggers_to_activate.append(trigger['name'])
                    break
    
    # Check individual asset triggers
    for trigger in config['rebalance_triggers']['individual_assets']:
        asset = trigger['asset']
        if trigger['type'] == 'threshold' and abs(portfolio['weights'][asset] - target) > trigger['threshold']:
            triggers_to_activate.append(trigger['name'])
        elif trigger['type'] == 'periodic':
            # Example: quarterly check, assumes quarters start in January
            if current_date.month % 3 == 1 and current_date.day == 1:
                triggers_to_activate.append(trigger['name'])

    return triggers_to_activate

def execute_actions(triggers, config, portfolio):
    for action_item in config['rebalance_actions']:
        if action_item['trigger'] in triggers:
            for action in action_item['actions']:
                if action['action'] == 'reallocate':
                    for asset, target in action['method']['targets'].items():
                        portfolio['weights'][asset] = target  # Simplified rebalancing logic
                elif action['action'] == 'review':
                    print(action['message'])
                elif action['action'] == 'sell':
                    amount = float(action['amount'].split('%')[0]) / 100 * portfolio['weights'][action_item['trigger'].split('_')[0]]
                    portfolio['weights'][action_item['trigger'].split('_')[0]] -= amount
                elif action['action'] == 'buy':
                    amount = float(action['amount'].split('%')[0]) / 100 * portfolio['weights'][action_item['trigger'].split('_')[0]]
                    portfolio['weights'][action['asset']] += amount

def simulate_backtest(config, start_date, end_date):
    # Initial portfolio setup
    portfolio = {
        'weights': {
            'Asset1': 40,
            'Asset2': 35,
            'Asset3': 25
        }
    }
    
    current_date = start_date
    while current_date <= end_date:
        triggers = check_triggers(portfolio, config, current_date)
        if triggers:
            execute_actions(triggers, config, portfolio)
        
        # Assuming daily steps for simplicity, adjust as necessary for your time step
        current_date += timedelta(days=1)
    
    return portfolio

# Load configuration
config = load_config('config.yaml')

# Define simulation start and end dates
start_date = datetime(2023, 1, 1)
end_date = datetime(2023, 12, 31)

# Run the backtest simulation
final_portfolio = simulate_backtest(config, start_date, end_date)
print("Final portfolio weights:", final_portfolio['weights'])
