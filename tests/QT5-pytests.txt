Below is an example that assumes you have a PyQt5-based GUI for a screen calculator that prices a simple derivative product. I'm going to make some assumptions about how your code is structured for demonstration purposes.

Let's assume you have a UI where:
- A button named `calculateButton` triggers the pricing calculation.
- A text field named `inputField` accepts numerical input for the derivative.
- A text field named `outputField` displays the calculated price.

Here's a basic example of what your PyQt5 code might look like:

```python
# file: screen_calculator.py
from PyQt5.QtWidgets import QWidget, QPushButton, QLineEdit, QVBoxLayout
from your_analytics_package import calculate_derivative_price

class DerivativeCalculator(QWidget):
    def __init__(self):
        super(DerivativeCalculator, self).__init__()

        self.initUI()

    def initUI(self):
        self.calculateButton = QPushButton('Calculate', self)
        self.inputField = QLineEdit(self)
        self.outputField = QLineEdit(self)
        self.outputField.setReadOnly(True)

        vbox = QVBoxLayout()
        vbox.addWidget(self.inputField)
        vbox.addWidget(self.calculateButton)
        vbox.addWidget(self.outputField)

        self.setLayout(vbox)

        self.calculateButton.clicked.connect(self.perform_calculation)

    def perform_calculation(self):
        input_value = float(self.inputField.text())
        calculated_price = calculate_derivative_price(input_value)
        self.outputField.setText(str(calculated_price))
```

Let's also assume you have an analytics function like so:

```python
# file: your_analytics_package.py
def calculate_derivative_price(value):
    return value * 2.0  # This is a dummy example
```

You could test this setup with `pytest` and `pytest-qt` as follows:

```python
# file: test_screen_calculator.py
import pytest
from PyQt5.QtCore import Qt
from screen_calculator import DerivativeCalculator

@pytest.fixture
def calculator(qtbot):
    widget = DerivativeCalculator()
    qtbot.addWidget(widget)
    return widget

def test_calculate_button_click(qtbot, calculator):
    # Arrange
    calculator.inputField.setText("2.0")
    
    # Act
    qtbot.mouseClick(calculator.calculateButton, Qt.LeftButton)
    
    # Assert
    assert calculator.outputField.text() == "4.0"
```

In this example, the `calculator` fixture initializes your `DerivativeCalculator` widget and adds it to `qtbot`, a fixture provided by `pytest-qt` that allows interaction with Qt objects.

The `test_calculate_button_click` function does the following:
- Sets up the initial state by populating `inputField` with a value of "2.0".
- Simulates a mouse click on `calculateButton`.
- Checks that `outputField` gets populated with "4.0", which should be the calculated derivative price for the input value.

You can run the test using:

```bash
pytest test_screen_calculator.py
```

This example assumes that your analytics function (`calculate_derivative_price`) is straightforward and deterministic. If it's more complicated, you might want to mock it using `pytest-mock` or Python's built-in `unittest.mock`.
