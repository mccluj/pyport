import pandas as pd
import pytest

def generate_tests_from_dataframe(df):
    # Extract column names as argnames
    argnames = ",".join(df.columns)
    
    # Convert DataFrame rows to list of tuples
    param_values = [tuple(row) for row in df.to_records(index=False)]
    
    # Define the test function dynamically
    def dynamic_test_function(**kwargs):
        assert kwargs['input1'] + kwargs['input2'] == kwargs['expected']
    
    # Decorate the function with pytest.mark.parametrize
    decorated_function = pytest.mark.parametrize(argnames, param_values)(dynamic_test_function)
    
    return decorated_function

# Example DataFrame
df = pd.DataFrame({
    'input1': [1, 2, 3],
    'input2': [4, 5, 6],
    'expected': [5, 7, 9]
})

# Generate the test function from the DataFrame and assign it to a module-level variable
test_dynamic = generate_tests_from_dataframe(df)

# If running the tests manually, call pytest.main()
if __name__ == "__main__":
    pytest.main([__file__])
